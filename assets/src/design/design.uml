@startuml

/'
1) We create a GeoGridConfig by passing a config file containing the filename of the households, cities and commutes csv files.
2) We create a GeoGrid by passing the created GeoGridConfig to the constructor of GeoGrid.
3) This method requests the necessary information from the GeoGridConfig.
'/

class CitiesReader {
	{static} + getLocationsFromCSV(locations_csv: Stream) : List<Locations>
}
class CommutesReader {
	{static} + getCommutesFromCSV(commute_csv: Stream) : Map<City, Map<City, Integer>>
}
class HouseholdsReader {
	{static} + getHouseholdsFromCSV(household_csv: Stream) : List<Household>
}

' This holds all info needed to generate a specific geogrid
class GeoGridConfig {
	+ GeoGridConfig(config_csv)
	+ getHouseholds() : List<Houshold>
	+ getCities() : List<City>
	+ getCommute() : Map<City, Map<City, Integer>>
	- parseCities(input_file : csv)
	- parseHouseholds(input_file : csv)
	- parseCommute(input_file : csv)
}

class GeoGrid {
	+ GeoGrid(config : GeoGridConfig)
}

class Community {
    
}

class PrimaryCommunity {

}

class SecondaryCommunity {

}

class School {

}

class HighSchool {

}

class Workplace {

}

class ContactPool {
	- Capacity: integer
	- capacityUsed : integer
}

class Location {
	- id : integer
	- name : String
	- province : String
}

class Household {

}

class Coordinate {
	longitude : double 
	latitude : double 
}

class GeoGridReader {
    + write(grid : GeoGrid, output_stream : Stream)
}

class GeoGridWriter {
    + read(input_stream: Stream) : GeoGrid
}

class GeoGridJSONWriter {
    + read(input_stream: Stream) : GeoGrid
}

class GeoGridJSONReader {
    + write(grid : GeoGrid, output_stream : Stream)
}

School --|> ContactPool
HighSchool --|> ContactPool 
Workplace --|> ContactPool 
Community --|> ContactPool
Household --|> ContactPool

Location o-- ContactPool

PrimaryCommunity --|> Community
SecondaryCommunity --|> Community

GeoGridJSONReader --|> GeoGridReader
GeoGridJSONWriter --|> GeoGridWriter

GeoGrid o-- Location

Coordinate --o Location
@enduml
