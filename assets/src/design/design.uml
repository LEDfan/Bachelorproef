@startuml

/'
1) We create a GeoGridConfig by passing a config file containing the filename of the households, cities and commutes csv files.
2) We create a GeoGrid by passing the created GeoGridConfig to the constructor of GeoGrid.
3) This method requests the necessary information from the GeoGridConfig.
'/

class ReaderFactory {
    + createCitiesReader(filename: String): CitiesReader
    + createCommutesReader(filename: String): CommutesReader 
    + createHouseholdsReader(filename: String): HouseholdsReader 
}

class CitiesReader {
    - locations: List<Locations>
    - CitiesReader(locations: Stream)
	+ getLocations() : List<Locations>
}
class CommutesReader {
    - commutes: Map<City, Map<City, Integer>>
    - CommutesReader(commutes: Stream)
	+ getCommutes() : Map<City, Map<City, Integer>>
}
class HouseholdsReader {
    - households: List<Household>
    - HouseholdsReader(households: Stream)
	+ getHouseholds() : List<Household>
}

class CitiesCSVReader {
}
class CommutesCSVReader {
}
class HouseholdsCSVReader {
}

' This holds all info needed to generate a specific geogrid
class GeoGridConfig {
	+ GeoGridConfig(input_stream: Stream)
	+ getHouseholds() : List<Houshold>
	+ getCities() : List<City>
	+ getCommute() : Map<City, Map<City, Integer>>
}

class GeoGrid {
	+ GeoGrid(config : GeoGridConfig)
}

class Community {
    + getPoolSize(): integer 
    + getCapacity(): integer
    + addHousehold(household: Household)    
}

class School {
    + getPoolSize(): integer 
    + getCapacity(): integer
}

class HighSchool {
    + getPoolSize(): integer 
    + getCapacity(): integer
}

class Workplace {
    + getPoolSize(): integer 
    + getCapacity(): integer
}

class ContactPool {
    - people: List<Person>
}

class ContactCenter {
    - pools: List<ContactPool>
    + getPoolSize(): integer 
}

class Cluster {
    + getCapacity(): integer
	- capacity: integer
	- capacityUsed : integer
}

class Location {
	- id : integer
	- name : String
	- province : String
    - contactCenters: List<ContactCenter>
}

class Household {
    ' PoolSize == Capacity
    + getPoolSize(): integer 
    + getCapacity(): integer
}

class Coordinate {
	+ longitude : double 
	+ latitude : double 
}

class GeoGridReader {
    + read(input_stream: Stream) : GeoGrid
}

class GeoGridWriter {
    + write(grid : GeoGrid, output_stream : Stream)
}

class GeoGridJSONWriter {
    + write(grid : GeoGrid, output_stream : Stream)
}

class GeoGridJSONReader {
    + read(input_stream: Stream) : GeoGrid
}

class Person {
    
}

School --|> ContactCenter
HighSchool --|> ContactCenter 
Workplace --|> ContactCenter 
Community --|> ContactCenter
Household --|> ContactCenter

ContactCenter --|> Cluster
ContactPool --|> Cluster

Location o-- ContactCenter
ContactPool o-- Person

GeoGridJSONReader --|> GeoGridReader
GeoGridJSONWriter --|> GeoGridWriter

CitiesCSVReader --|> CitiesReader
CommutesCSVReader --|> CommutesReader
HouseholdsCSVReader --|> HouseholdsReader

GeoGrid o-- Location

ContactCenter o-- ContactPool

Coordinate --* Location
@enduml
