@startuml

/'
1) We create a GeoGridConfig by passing a config file containing the filename of the households, cities and commutes csv files.
2) We create a GeoGrid by passing the created GeoGridConfig to the constructor of GeoGrid.
3) This method requests the necessary information from the GeoGridConfig.
'/

class ReaderFactory {
    + createCitiesReader(filename: String): CitiesReader
    + createCommutesReader(filename: String): CommutesReader 
    + createHouseholdsReader(filename: String): HouseholdsReader 
}

interface CitiesReader {
    - locations: List<Locations>
    - CitiesReader(locations: Stream)
	+ getLocations() : List<Locations>
}
interface CommutesReader {
    - commutes: Map<City, Map<City, Integer>>
    - CommutesReader(commutes: Stream)
	+ getCommutes() : Map<City, Map<City, Integer>>
}
interface HouseholdsReader {
    - households: List<Household>
    - HouseholdsReader(households: Stream)
	+ getHouseholds() : List<Household>
}

class CitiesCSVReader implements CitiesReader {
}
class CommutesCSVReader implements CommutesReader {
}
class HouseholdsCSVReader implements HouseholdsReader {
}

class GeoGridJSONWriter implements GeoGridWriter {
}

class GeoGridJSONReader implements GeoGridReader {
}

interface GeoGridReader {
    + read(input_stream: Stream) : GeoGrid
}

interface GeoGridWriter {
    + write(grid : GeoGrid, output_stream : Stream)
}

newpage

class GeoPopulator {
    + addPartialPopulator(generator: IPartialPopulator)
    + generateGeoGrid(filename: String): GeoGrid
    - partialPopulators: List<IPartialPopulator>

}

interface IPartialPopulator {
    + apply(grid: GeoGrid)
}


class HouseholdPopulator implements IPartialPopulator {

}

class StudentPopulator implements IPartialPopulator {

}

class SchoolPopulator implements IPartialPopulator {

}

class WorkspacePopulator implements IPartialPopulator {

}

class CommunityPopulator implements IPartialPopulator {

}

newpage

class GeoGridGenerator {
    + addPartialGenerator(generator: IPartialGenerator)
    + generateGeoGrid(filename: String): GeoGrid
    - partialGenerators: List<IPartialGenerator>
}

interface IPartialGenerator {
    + apply(grid: GeoGrid)
}

class SchoolGenerator implements IPartialGenerator {

}

class WorkplaceGenerator implements IPartialGenerator {

}

class CommunityGenerator implements IPartialGenerator {

}

class HouseholdGenerator implements IPartialGenerator {

}

newpage

class GeoGrid {
    - locations: List<Locations>
}

class Community {
    + addHousehold(household: Household)    
}

class School {
}

class HighSchool {
}

class Workplace {
}

class ContactPool {
    - people: List<Person>
    + getCapacity(): integer
	- capacity: integer
	- capacityUsed : integer
}

class ContactCenter {
    - pools: List<ContactPool>
    + getPoolSize(): integer 
    + getMaxPools(): integer
    - maxPools: integer
}

class Location {
	- id : integer
	- name : String
	- province : String
    - contactCenters: List<ContactCenter>
}

class Household {
    ' PoolSize == Capacity
}

class Coordinate {
	+ longitude : double 
	+ latitude : double 
}

class Person {
    
}

School --|> ContactCenter
HighSchool --|> ContactCenter 
Workplace --|> ContactCenter 
Community --|> ContactCenter
Household --|> ContactCenter

Location o-- ContactCenter
ContactPool o-- Person

GeoGrid o-- Location

ContactCenter o-- ContactPool

Coordinate --* Location
@enduml
