#include <gengeopop/GeoGridConfig.h>
#include <gengeopop/School.h>
#include <gengeopop/populators/SchoolPopulator.h>
#include <gtest/gtest.h>
#include <util/LogUtils.h>
#include <util/RNManager.h>

using namespace gengeopop;
using namespace stride;

namespace {

std::shared_ptr<GeoGrid> createGeoGrid(int locCount, int locPop, int schoolCount, int houseHoldCount, int personCount,
                                       GeoGridConfig& geoGridConfig)
{

        std::vector<unsigned int> populationSample = {
            17, 27, 65, 40, 29, 76, 27, 50, 28, 62, 50, 14, 30, 36, 12, 31, 25, 72, 62, 4,  40, 52, 55, 50, 62,
            1,  30, 23, 6,  71, 50, 65, 8,  26, 44, 76, 23, 22, 69, 22, 4,  22, 48, 12, 57, 42, 36, 45, 73, 13,
            18, 58, 37, 43, 70, 36, 11, 54, 26, 8,  7,  6,  76, 15, 5,  23, 34, 74, 17, 33, 23, 54, 43, 72, 46,
            9,  57, 53, 75, 45, 29, 58, 67, 36, 63, 29, 24, 7,  35, 53, 40, 56, 60, 62, 53, 68, 78, 73, 24, 49,
            62, 12, 17, 58, 19, 77, 34, 40, 11, 65, 75, 27, 3,  34, 75, 1,  3,  28, 6,  72, 50, 69, 40, 42, 36,
            33, 77, 71, 47, 60, 53, 22, 13, 43, 62, 35, 47, 3,  68, 15, 53, 75, 2,  62, 54, 1,  32, 71, 55, 58,
            42, 69, 29, 15, 64, 66, 43, 15, 5,  70, 41, 43, 18, 19, 16, 57, 62, 12, 75, 76, 6,  67, 61, 11, 15,
            22, 51, 67, 38, 74, 66, 70, 1,  16, 71, 15, 40, 38, 11, 48, 45, 59, 11, 32, 18, 40, 46, 65, 21, 59,
            22, 2,  75, 5,  15, 10, 21, 59, 11, 61, 11, 9,  76, 76, 4,  66, 74, 74, 20, 18, 38, 5,  53, 29, 76,
            21, 73, 54, 43, 45, 12, 71, 70, 72, 36, 28, 18, 77, 53, 37, 40, 51, 71, 45, 18, 51, 22, 9,  17, 48,
            76, 73, 9,  27, 5,  68, 25, 16, 29, 58, 78, 75, 40, 8,  37, 63, 63, 76, 55, 47, 18, 4,  21, 39, 45,
            42, 20, 41, 40, 37, 38, 30, 48, 9,  40, 23, 68, 77, 21, 50, 18, 27, 54, 1,  32, 67, 27, 14, 4,  78};

        auto geoGrid = std::make_shared<GeoGrid>();

        std::size_t populationSampleId = 0;

        for (int locI = 0; locI < locCount; locI++) {
                auto loc = std::make_shared<Location>(locI, 1, locPop);

                for (int schI = 0; schI < schoolCount; schI++) {
                        auto school = std::make_shared<School>(std::stoi(std::to_string(locI) + std::to_string(schI)));
                        school->Fill(geoGridConfig);
                        loc->AddContactCenter(school);
                }

                for (int hI = 0; hI < houseHoldCount; hI++) {
                        auto household =
                            std::make_shared<Household>(std::stoi(std::to_string(locI) + std::to_string(hI)));

                        household->Fill(geoGridConfig);

                        auto contactPool = household->GetPools()[0];

                        for (int pI = 0; pI < personCount; pI++) {
                                stride::Person* person = geoGrid->CreatePerson(
                                    static_cast<unsigned int>(
                                        std::stoi(std::to_string(locI) + std::to_string(hI) + std::to_string(pI))),
                                    populationSample[populationSampleId], household->GetId(), 0, 0, 0, 0);

                                contactPool->AddMember(person);
                                populationSampleId++;
                                if (populationSampleId == 300) {
                                        populationSampleId = 0;
                                }
                        }
                        loc->AddContactCenter(household);
                }
                geoGrid->AddLocation(loc);
        }
        geoGrid->Finalize();
        return geoGrid;
}

TEST(SchoolPopulatorTest, OneLocationTest)
{

        stride::util::RNManager::Info rnInfo;
        rnInfo.m_seed = 2;
        stride::util::RNManager rnManager(rnInfo);

        SchoolPopulator schoolPopulator(rnManager, stride::util::LogUtils::CreateNullLogger("nullLogger"));
        GeoGridConfig   config{};

        auto geoGrid = createGeoGrid(1, 300, 5, 100, 3, config);

        schoolPopulator.Apply(geoGrid, config);

        auto location = *geoGrid->begin();

        auto schools = location->GetContactCentersOfType<School>();

        EXPECT_EQ(5, schools.size());

        std::map<int, int> usedCapacity{
            {1, 0},   {2, 1},   {3, 0},   {4, 0},   {5, 0},   {6, 0},   {7, 1},   {8, 1},   {9, 0},   {10, 0},
            {11, 1},  {12, 1},  {13, 0},  {14, 1},  {15, 0},  {16, 2},  {17, 1},  {18, 0},  {19, 1},  {20, 0},
            {21, 0},  {22, 0},  {23, 1},  {24, 1},  {25, 0},  {26, 0},  {27, 0},  {28, 0},  {29, 0},  {30, 0},
            {31, 0},  {32, 1},  {33, 1},  {34, 0},  {35, 0},  {36, 1},  {37, 0},  {38, 1},  {39, 0},  {40, 1},
            {41, 0},  {42, 0},  {43, 1},  {44, 2},  {45, 0},  {46, 1},  {47, 1},  {48, 0},  {49, 1},  {50, 1},
            {51, 0},  {52, 1},  {53, 0},  {54, 0},  {55, 0},  {56, 0},  {57, 0},  {58, 0},  {59, 1},  {60, 0},
            {61, 0},  {62, 0},  {63, 0},  {64, 0},  {65, 2},  {66, 0},  {67, 0},  {68, 0},  {69, 0},  {70, 0},
            {71, 1},  {72, 0},  {73, 0},  {74, 2},  {75, 1},  {76, 0},  {77, 0},  {78, 0},  {79, 0},  {80, 1},
            {81, 0},  {82, 0},  {83, 0},  {84, 0},  {85, 0},  {86, 1},  {87, 0},  {88, 0},  {89, 1},  {90, 0},
            {91, 0},  {92, 0},  {93, 0},  {94, 0},  {95, 0},  {96, 0},  {97, 0},  {98, 0},  {99, 0},  {100, 0},
            {101, 1}, {102, 0}, {103, 0}, {104, 0}, {105, 0}, {106, 0}, {107, 1}, {108, 0}, {109, 0}, {110, 0},
            {111, 1}, {112, 1}, {113, 0}, {114, 0}, {115, 0}, {116, 1}, {117, 1}, {118, 2}, {119, 0}, {120, 2},
            {121, 0}, {122, 0}, {123, 0}, {124, 0}, {125, 0}};

        for (auto& school : schools) {
                EXPECT_EQ(25, school->GetPools().size());
                for (auto& pool : school->GetPools()) {
                        EXPECT_EQ(usedCapacity[pool->GetID()], pool->GetUsedCapacity());
                        for (stride::Person* person : *pool) {
                                EXPECT_LE(person->GetAge(), 18);
                                EXPECT_GE(person->GetAge(), 6);
                        }
                }
        }

        std::map<int, int> persons{
            {0, 118},   {1, 0},    {2, 0},     {10, 0},    {11, 0},    {12, 0},   {20, 0},    {21, 0},    {22, 0},
            {30, 0},    {31, 0},   {32, 47},   {40, 0},    {41, 0},    {42, 71},  {50, 0},    {51, 0},    {52, 0},
            {60, 0},    {61, 0},   {62, 0},    {70, 0},    {71, 0},    {72, 0},   {80, 0},    {81, 0},    {82, 0},
            {90, 0},    {91, 52},  {92, 0},    {100, 0},   {101, 0},   {102, 40}, {110, 0},   {111, 0},   {112, 0},
            {120, 0},   {121, 0},  {122, 0},   {130, 0},   {131, 0},   {132, 0},  {140, 0},   {141, 43},  {142, 0},
            {150, 0},   {151, 0},  {152, 0},   {160, 0},   {161, 118}, {162, 0},  {170, 0},   {171, 0},   {172, 0},
            {180, 0},   {181, 0},  {182, 107}, {190, 0},   {191, 0},   {192, 80}, {200, 32},  {201, 16},  {202, 0},
            {210, 101}, {211, 0},  {212, 0},   {220, 0},   {221, 0},   {222, 38}, {230, 0},   {231, 0},   {232, 0},
            {240, 0},   {241, 0},  {242, 0},   {250, 112}, {251, 0},   {252, 0},  {260, 0},   {261, 0},   {262, 0},
            {270, 0},   {271, 0},  {272, 0},   {280, 0},   {281, 0},   {282, 0},  {290, 116}, {291, 0},   {292, 0},
            {300, 0},   {301, 0},  {302, 0},   {310, 0},   {311, 0},   {312, 0},  {320, 0},   {321, 0},   {322, 0},
            {330, 0},   {331, 0},  {332, 14},  {340, 74},  {341, 0},   {342, 0},  {350, 0},   {351, 0},   {352, 0},
            {360, 24},  {361, 0},  {362, 0},   {370, 0},   {371, 0},   {372, 0},  {380, 0},   {381, 0},   {382, 0},
            {390, 0},   {391, 23}, {392, 0},   {400, 0},   {401, 0},   {402, 0},  {410, 0},   {411, 0},   {412, 0},
            {420, 0},   {421, 0},  {422, 0},   {430, 0},   {431, 0},   {432, 0},  {440, 120}, {441, 0},   {442, 0},
            {450, 0},   {451, 0},  {452, 0},   {460, 0},   {461, 16},  {462, 0},  {470, 0},   {471, 0},   {472, 0},
            {480, 0},   {481, 0},  {482, 0},   {490, 0},   {491, 0},   {492, 0},  {500, 0},   {501, 0},   {502, 0},
            {510, 49},  {511, 0},  {512, 0},   {520, 0},   {521, 120}, {522, 0},  {530, 0},   {531, 0},   {532, 0},
            {540, 0},   {541, 0},  {542, 12},  {550, 0},   {551, 0},   {552, 65}, {560, 0},   {561, 0},   {562, 86},
            {570, 0},   {571, 0},  {572, 33},  {580, 8},   {581, 0},   {582, 0},  {590, 0},   {591, 0},   {592, 0},
            {600, 0},   {601, 0},  {602, 0},   {610, 50},  {611, 0},   {612, 89}, {620, 0},   {621, 0},   {622, 74},
            {630, 0},   {631, 0},  {632, 0},   {640, 65},  {641, 0},   {642, 0},  {650, 0},   {651, 0},   {652, 0},
            {660, 0},   {661, 0},  {662, 0},   {670, 0},   {671, 0},   {672, 0},  {680, 11},  {681, 117}, {682, 0},
            {690, 0},   {691, 7},  {692, 0},   {700, 46},  {701, 44},  {702, 0},  {710, 0},   {711, 0},   {712, 0},
            {720, 0},   {721, 0},  {722, 0},   {730, 0},   {731, 0},   {732, 0},  {740, 0},   {741, 0},   {742, 0},
            {750, 0},   {751, 0},  {752, 0},   {760, 0},   {761, 0},   {762, 19}, {770, 0},   {771, 0},   {772, 0},
            {780, 0},   {781, 0},  {782, 0},   {790, 0},   {791, 0},   {792, 0},  {800, 0},   {801, 0},   {802, 0},
            {810, 0},   {811, 0},  {812, 0},   {820, 0},   {821, 75},  {822, 44}, {830, 0},   {831, 0},   {832, 0},
            {840, 59},  {841, 0},  {842, 0},   {850, 0},   {851, 0},   {852, 36}, {860, 0},   {861, 0},   {862, 0},
            {870, 0},   {871, 0},  {872, 111}, {880, 0},   {881, 0},   {882, 0},  {890, 0},   {891, 0},   {892, 0},
            {900, 0},   {901, 0},  {902, 0},   {910, 0},   {911, 0},   {912, 0},  {920, 0},   {921, 0},   {922, 0},
            {930, 0},   {931, 0},  {932, 0},   {940, 0},   {941, 2},   {942, 0},  {950, 0},   {951, 0},   {952, 0},
            {960, 0},   {961, 0},  {962, 0},   {970, 0},   {971, 0},   {972, 0},  {980, 0},   {981, 0},   {982, 0},
            {990, 17},  {991, 0},  {992, 0}};

        for (const stride::Person& person : *geoGrid->GetPopulation()) {
                EXPECT_EQ(persons[person.GetId()], person.GetSchoolId());
        }
}

} // namespace
