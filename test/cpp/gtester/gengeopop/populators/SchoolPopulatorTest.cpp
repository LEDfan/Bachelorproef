#include <gengeopop/GeoGridConfig.h>
#include <gengeopop/School.h>
#include <gengeopop/populators/SchoolPopulator.h>
#include <gtest/gtest.h>
#include <util/LogUtils.h>
#include <util/RNManager.h>

using namespace gengeopop;
using namespace stride;

namespace {

std::shared_ptr<GeoGrid> createGeoGrid(int locCount, int locPop, int schoolCount, int houseHoldCount, int personCount,
                                       GeoGridConfig& geoGridConfig)
{

        std::vector<unsigned int> populationSample = {
            17, 27, 65, 40, 29, 76, 27, 50, 28, 62, 50, 14, 30, 36, 12, 31, 25, 72, 62, 4,  40, 52, 55, 50, 62,
            1,  30, 23, 6,  71, 50, 65, 8,  26, 44, 76, 23, 22, 69, 22, 4,  22, 48, 12, 57, 42, 36, 45, 73, 13,
            18, 58, 37, 43, 70, 36, 11, 54, 26, 8,  7,  6,  76, 15, 5,  23, 34, 74, 17, 33, 23, 54, 43, 72, 46,
            9,  57, 53, 75, 45, 29, 58, 67, 36, 63, 29, 24, 7,  35, 53, 40, 56, 60, 62, 53, 68, 78, 73, 24, 49,
            62, 12, 17, 58, 19, 77, 34, 40, 11, 65, 75, 27, 3,  34, 75, 1,  3,  28, 6,  72, 50, 69, 40, 42, 36,
            33, 77, 71, 47, 60, 53, 22, 13, 43, 62, 35, 47, 3,  68, 15, 53, 75, 2,  62, 54, 1,  32, 71, 55, 58,
            42, 69, 29, 15, 64, 66, 43, 15, 5,  70, 41, 43, 18, 19, 16, 57, 62, 12, 75, 76, 6,  67, 61, 11, 15,
            22, 51, 67, 38, 74, 66, 70, 1,  16, 71, 15, 40, 38, 11, 48, 45, 59, 11, 32, 18, 40, 46, 65, 21, 59,
            22, 2,  75, 5,  15, 10, 21, 59, 11, 61, 11, 9,  76, 76, 4,  66, 74, 74, 20, 18, 38, 5,  53, 29, 76,
            21, 73, 54, 43, 45, 12, 71, 70, 72, 36, 28, 18, 77, 53, 37, 40, 51, 71, 45, 18, 51, 22, 9,  17, 48,
            76, 73, 9,  27, 5,  68, 25, 16, 29, 58, 78, 75, 40, 8,  37, 63, 63, 76, 55, 47, 18, 4,  21, 39, 45,
            42, 20, 41, 40, 37, 38, 30, 48, 9,  40, 23, 68, 77, 21, 50, 18, 27, 54, 1,  32, 67, 27, 14, 4,  78};

        auto geoGrid = std::make_shared<GeoGrid>();

        std::size_t populationSampleId = 0;

        int personId = 0;

        for (int locI = 0; locI < locCount; locI++) {
                auto loc = std::make_shared<Location>(locI, 1, locPop);

                for (int schI = 0; schI < schoolCount; schI++) {
                        auto school = std::make_shared<School>(std::stoi(std::to_string(locI) + std::to_string(schI)));
                        school->Fill(geoGridConfig);
                        loc->AddContactCenter(school);
                }

                for (int hI = 0; hI < houseHoldCount; hI++) {
                        auto household =
                            std::make_shared<Household>(std::stoi(std::to_string(locI) + std::to_string(hI)));

                        household->Fill(geoGridConfig);

                        auto contactPool = household->GetPools()[0];

                        for (int pI = 0; pI < personCount; pI++) {
                                stride::Person* person = geoGrid->CreatePerson(
                                    personId, populationSample[populationSampleId], household->GetId(), 0, 0, 0, 0);

                                contactPool->AddMember(person);
                                populationSampleId++;
                                if (populationSampleId == 300) {
                                        populationSampleId = 0;
                                }
                                personId++;
                        }
                        loc->AddContactCenter(household);
                }
                geoGrid->AddLocation(loc);
        }
        return geoGrid;
}

TEST(SchoolPopulatorTest, OneLocationTest)
{

        stride::util::RNManager::Info rnInfo;
        rnInfo.m_seed = 2;
        stride::util::RNManager rnManager(rnInfo);

        SchoolPopulator schoolPopulator(rnManager, stride::util::LogUtils::CreateNullLogger("nullLogger"));
        GeoGridConfig   config{};

        auto geoGrid = createGeoGrid(1, 300, 5, 100, 3, config);
        geoGrid->Finalize();

        schoolPopulator.Apply(geoGrid, config);

        auto location = *geoGrid->begin();

        auto schools = location->GetContactCentersOfType<School>();

        EXPECT_EQ(5, schools.size());

        std::map<int, int> usedCapacity{
            {1, 0},   {2, 1},   {3, 0},   {4, 0},   {5, 0},   {6, 0},   {7, 1},   {8, 1},   {9, 0},   {10, 0},
            {11, 1},  {12, 1},  {13, 0},  {14, 1},  {15, 0},  {16, 2},  {17, 1},  {18, 0},  {19, 1},  {20, 0},
            {21, 0},  {22, 0},  {23, 1},  {24, 1},  {25, 0},  {26, 0},  {27, 0},  {28, 0},  {29, 0},  {30, 0},
            {31, 0},  {32, 1},  {33, 1},  {34, 0},  {35, 0},  {36, 1},  {37, 0},  {38, 1},  {39, 0},  {40, 1},
            {41, 0},  {42, 0},  {43, 1},  {44, 2},  {45, 0},  {46, 1},  {47, 1},  {48, 0},  {49, 1},  {50, 1},
            {51, 0},  {52, 1},  {53, 0},  {54, 0},  {55, 0},  {56, 0},  {57, 0},  {58, 0},  {59, 1},  {60, 0},
            {61, 0},  {62, 0},  {63, 0},  {64, 0},  {65, 2},  {66, 0},  {67, 0},  {68, 0},  {69, 0},  {70, 0},
            {71, 1},  {72, 0},  {73, 0},  {74, 2},  {75, 1},  {76, 0},  {77, 0},  {78, 0},  {79, 0},  {80, 1},
            {81, 0},  {82, 0},  {83, 0},  {84, 0},  {85, 0},  {86, 1},  {87, 0},  {88, 0},  {89, 1},  {90, 0},
            {91, 0},  {92, 0},  {93, 0},  {94, 0},  {95, 0},  {96, 0},  {97, 0},  {98, 0},  {99, 0},  {100, 0},
            {101, 1}, {102, 0}, {103, 0}, {104, 0}, {105, 0}, {106, 0}, {107, 1}, {108, 0}, {109, 0}, {110, 0},
            {111, 1}, {112, 1}, {113, 0}, {114, 0}, {115, 0}, {116, 1}, {117, 1}, {118, 2}, {119, 0}, {120, 2},
            {121, 0}, {122, 0}, {123, 0}, {124, 0}, {125, 0}};

        for (auto& school : schools) {
                EXPECT_EQ(25, school->GetPools().size());
                for (auto& pool : school->GetPools()) {
                        EXPECT_EQ(usedCapacity[pool->GetID()], pool->GetUsedCapacity());
                        for (stride::Person* person : *pool) {
                                EXPECT_LE(person->GetAge(), 18);
                                EXPECT_GE(person->GetAge(), 6);
                        }
                }
        }

        std::map<int, int> persons{
            {0, 118},  {1, 0},    {2, 0},     {3, 0},    {4, 0},     {5, 0},    {6, 0},     {7, 0},     {8, 0},
            {9, 0},    {10, 0},   {11, 47},   {12, 0},   {13, 0},    {14, 71},  {15, 0},    {16, 0},    {17, 0},
            {18, 0},   {19, 0},   {20, 0},    {21, 0},   {22, 0},    {23, 0},   {24, 0},    {25, 0},    {26, 0},
            {27, 0},   {28, 52},  {29, 0},    {30, 0},   {31, 0},    {32, 40},  {33, 0},    {34, 0},    {35, 0},
            {36, 0},   {37, 0},   {38, 0},    {39, 0},   {40, 0},    {41, 0},   {42, 0},    {43, 43},   {44, 0},
            {45, 0},   {46, 0},   {47, 0},    {48, 0},   {49, 118},  {50, 0},   {51, 0},    {52, 0},    {53, 0},
            {54, 0},   {55, 0},   {56, 107},  {57, 0},   {58, 0},    {59, 80},  {60, 32},   {61, 16},   {62, 0},
            {63, 101}, {64, 0},   {65, 0},    {66, 0},   {67, 0},    {68, 38},  {69, 0},    {70, 0},    {71, 0},
            {72, 0},   {73, 0},   {74, 0},    {75, 112}, {76, 0},    {77, 0},   {78, 0},    {79, 0},    {80, 0},
            {81, 0},   {82, 0},   {83, 0},    {84, 0},   {85, 0},    {86, 0},   {87, 116},  {88, 0},    {89, 0},
            {90, 0},   {91, 0},   {92, 0},    {93, 0},   {94, 0},    {95, 0},   {96, 0},    {97, 0},    {98, 0},
            {99, 0},   {100, 0},  {101, 14},  {102, 74}, {103, 0},   {104, 0},  {105, 0},   {106, 0},   {107, 0},
            {108, 24}, {109, 0},  {110, 0},   {111, 0},  {112, 0},   {113, 0},  {114, 0},   {115, 0},   {116, 0},
            {117, 0},  {118, 23}, {119, 0},   {120, 0},  {121, 0},   {122, 0},  {123, 0},   {124, 0},   {125, 0},
            {126, 0},  {127, 0},  {128, 0},   {129, 0},  {130, 0},   {131, 0},  {132, 120}, {133, 0},   {134, 0},
            {135, 0},  {136, 0},  {137, 0},   {138, 0},  {139, 16},  {140, 0},  {141, 0},   {142, 0},   {143, 0},
            {144, 0},  {145, 0},  {146, 0},   {147, 0},  {148, 0},   {149, 0},  {150, 0},   {151, 0},   {152, 0},
            {153, 49}, {154, 0},  {155, 0},   {156, 0},  {157, 120}, {158, 0},  {159, 0},   {160, 0},   {161, 0},
            {162, 0},  {163, 0},  {164, 12},  {165, 0},  {166, 0},   {167, 65}, {168, 0},   {169, 0},   {170, 86},
            {171, 0},  {172, 0},  {173, 33},  {174, 8},  {175, 0},   {176, 0},  {177, 0},   {178, 0},   {179, 0},
            {180, 0},  {181, 0},  {182, 0},   {183, 50}, {184, 0},   {185, 89}, {186, 0},   {187, 0},   {188, 74},
            {189, 0},  {190, 0},  {191, 0},   {192, 65}, {193, 0},   {194, 0},  {195, 0},   {196, 0},   {197, 0},
            {198, 0},  {199, 0},  {200, 0},   {201, 0},  {202, 0},   {203, 0},  {204, 11},  {205, 117}, {206, 0},
            {207, 0},  {208, 7},  {209, 0},   {210, 46}, {211, 44},  {212, 0},  {213, 0},   {214, 0},   {215, 0},
            {216, 0},  {217, 0},  {218, 0},   {219, 0},  {220, 0},   {221, 0},  {222, 0},   {223, 0},   {224, 0},
            {225, 0},  {226, 0},  {227, 0},   {228, 0},  {229, 0},   {230, 19}, {231, 0},   {232, 0},   {233, 0},
            {234, 0},  {235, 0},  {236, 0},   {237, 0},  {238, 0},   {239, 0},  {240, 0},   {241, 0},   {242, 0},
            {243, 0},  {244, 0},  {245, 0},   {246, 0},  {247, 75},  {248, 44}, {249, 0},   {250, 0},   {251, 0},
            {252, 59}, {253, 0},  {254, 0},   {255, 0},  {256, 0},   {257, 36}, {258, 0},   {259, 0},   {260, 0},
            {261, 0},  {262, 0},  {263, 111}, {264, 0},  {265, 0},   {266, 0},  {267, 0},   {268, 0},   {269, 0},
            {270, 0},  {271, 0},  {272, 0},   {273, 0},  {274, 0},   {275, 0},  {276, 0},   {277, 0},   {278, 0},
            {279, 0},  {280, 0},  {281, 0},   {282, 0},  {283, 2},   {284, 0},  {285, 0},   {286, 0},   {287, 0},
            {288, 0},  {289, 0},  {290, 0},   {291, 0},  {292, 0},   {293, 0},  {294, 0},   {295, 0},   {296, 0},
            {297, 17}, {298, 0},  {299, 0}};

        for (const stride::Person& person : *geoGrid->GetPopulation()) {
                EXPECT_EQ(persons[person.GetId()], person.GetSchoolId());
        }
}

TEST(SchoolPopulatorTest, TwoLocationTest)
{

        stride::util::RNManager::Info rnInfo;
        rnInfo.m_seed = 2;
        stride::util::RNManager rnManager(rnInfo);

        SchoolPopulator schoolPopulator(rnManager, stride::util::LogUtils::CreateNullLogger("nullLogger"));
        GeoGridConfig   config{};

        auto geoGrid = createGeoGrid(3, 100, 3, 33, 3, config);

        // Brasschaat and Schoten are close to each oter and will both have students from both
        // Kortrijk will only have students going to Kortrijk
        auto brasschaat = *geoGrid->begin();
        brasschaat->SetCoordinate(Coordinate(0, 0, 51.29227, 4.49419));

        auto schoten = *(geoGrid->begin() + 1);
        schoten->SetCoordinate(Coordinate(0, 0, 51.2497532, 4.4977063));

        auto kortrijk = *(geoGrid->begin() + 2);
        kortrijk->SetCoordinate(Coordinate(0, 0, 50.82900246, 3.264406009));

        geoGrid->Finalize();

        schoolPopulator.Apply(geoGrid, config);

        auto schools1 = brasschaat->GetContactCentersOfType<School>();
        auto schools2 = schoten->GetContactCentersOfType<School>();
        auto schools3 = kortrijk->GetContactCentersOfType<School>();

        EXPECT_EQ(3, schools1.size());
        EXPECT_EQ(3, schools2.size());
        EXPECT_EQ(3, schools3.size());

        std::map<int, int> persons{
            {0, 66},    {1, 0},     {2, 0},     {3, 0},     {4, 0},     {5, 0},     {6, 0},     {7, 0},     {8, 0},
            {9, 0},     {10, 0},    {11, 164},  {12, 0},    {13, 0},    {14, 10},   {15, 0},    {16, 0},    {17, 0},
            {18, 0},    {19, 0},    {20, 0},    {21, 0},    {22, 0},    {23, 0},    {24, 0},    {25, 0},    {26, 0},
            {27, 0},    {28, 170},  {29, 0},    {30, 0},    {31, 0},    {32, 155},  {33, 0},    {34, 0},    {35, 0},
            {36, 0},    {37, 0},    {38, 0},    {39, 0},    {40, 0},    {41, 0},    {42, 0},    {43, 159},  {44, 0},
            {45, 0},    {46, 0},    {47, 0},    {48, 0},    {49, 66},   {50, 0},    {51, 0},    {52, 0},    {53, 0},
            {54, 0},    {55, 0},    {56, 53},   {57, 0},    {58, 0},    {59, 21},   {60, 146},  {61, 127},  {62, 0},
            {63, 46},   {64, 0},    {65, 0},    {66, 0},    {67, 0},    {68, 154},  {69, 0},    {70, 0},    {71, 0},
            {72, 0},    {73, 0},    {74, 0},    {75, 60},   {76, 0},    {77, 0},    {78, 0},    {79, 0},    {80, 0},
            {81, 0},    {82, 0},    {83, 0},    {84, 0},    {85, 0},    {86, 0},    {87, 65},   {88, 0},    {89, 0},
            {90, 0},    {91, 0},    {92, 0},    {93, 0},    {94, 0},    {95, 0},    {96, 0},    {97, 0},    {98, 0},
            {99, 0},    {100, 0},   {101, 125}, {102, 14},  {103, 0},   {104, 0},   {105, 0},   {106, 0},   {107, 0},
            {108, 137}, {109, 0},   {110, 0},   {111, 0},   {112, 0},   {113, 0},   {114, 0},   {115, 0},   {116, 0},
            {117, 0},   {118, 135}, {119, 0},   {120, 0},   {121, 0},   {122, 0},   {123, 0},   {124, 0},   {125, 0},
            {126, 0},   {127, 0},   {128, 0},   {129, 0},   {130, 0},   {131, 0},   {132, 69},  {133, 0},   {134, 0},
            {135, 0},   {136, 0},   {137, 0},   {138, 0},   {139, 128}, {140, 0},   {141, 0},   {142, 0},   {143, 0},
            {144, 0},   {145, 0},   {146, 0},   {147, 0},   {148, 0},   {149, 0},   {150, 0},   {151, 0},   {152, 0},
            {153, 166}, {154, 0},   {155, 0},   {156, 0},   {157, 68},  {158, 0},   {159, 0},   {160, 0},   {161, 0},
            {162, 0},   {163, 0},   {164, 123}, {165, 0},   {166, 0},   {167, 3},   {168, 0},   {169, 0},   {170, 29},
            {171, 0},   {172, 0},   {173, 147}, {174, 117}, {175, 0},   {176, 0},   {177, 0},   {178, 0},   {179, 0},
            {180, 0},   {181, 0},   {182, 0},   {183, 168}, {184, 0},   {185, 32},  {186, 0},   {187, 0},   {188, 14},
            {189, 0},   {190, 0},   {191, 0},   {192, 3},   {193, 0},   {194, 0},   {195, 0},   {196, 0},   {197, 0},
            {198, 0},   {199, 0},   {200, 0},   {201, 0},   {202, 0},   {203, 0},   {204, 223}, {205, 287}, {206, 0},
            {207, 0},   {208, 221}, {209, 0},   {210, 244}, {211, 243}, {212, 0},   {213, 0},   {214, 0},   {215, 0},
            {216, 0},   {217, 0},   {218, 0},   {219, 0},   {220, 0},   {221, 0},   {222, 0},   {223, 0},   {224, 0},
            {225, 0},   {226, 0},   {227, 0},   {228, 0},   {229, 0},   {230, 228}, {231, 0},   {232, 0},   {233, 0},
            {234, 0},   {235, 0},   {236, 0},   {237, 0},   {238, 0},   {239, 0},   {240, 0},   {241, 0},   {242, 0},
            {243, 0},   {244, 0},   {245, 0},   {246, 0},   {247, 261}, {248, 243}, {249, 0},   {250, 0},   {251, 0},
            {252, 252}, {253, 0},   {254, 0},   {255, 0},   {256, 0},   {257, 238}, {258, 0},   {259, 0},   {260, 0},
            {261, 0},   {262, 0},   {263, 283}, {264, 0},   {265, 0},   {266, 0},   {267, 0},   {268, 0},   {269, 0},
            {270, 0},   {271, 0},   {272, 0},   {273, 0},   {274, 0},   {275, 0},   {276, 0},   {277, 0},   {278, 0},
            {279, 0},   {280, 0},   {281, 0},   {282, 0},   {283, 217}, {284, 0},   {285, 0},   {286, 0},   {287, 0},
            {288, 0},   {289, 0},   {290, 0},   {291, 0},   {292, 0},   {293, 0},   {294, 0},   {295, 0},   {296, 0}};

        for (const stride::Person& person : *geoGrid->GetPopulation()) {
                EXPECT_EQ(persons[person.GetId()], person.GetSchoolId());
        }

        for (const auto& household : kortrijk->GetContactCentersOfType<Household>()) {

                for (auto person : *household->GetPools()[0]) {
                        EXPECT_TRUE(person->GetSchoolId() == 0 ||
                                    (person->GetSchoolId() >= 217 && person->GetSchoolId() <= 291));
                }
        }
}

} // namespace
